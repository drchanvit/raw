{"version":3,"sources":["images/clearDay.svg","images/clearNight.svg","images/cloudy.svg","images/fog.svg","images/partlyCloudyDay.svg","images/partlyCloudyNight.svg","images/rain.svg","images/sleet.svg","images/snow.svg","images/thunderstorm.svg","images/tornado.svg","images/wind.svg","pages/ShowCities/ExtractData.js","pages/ShowCities/CardWeather.js","pages/ShowCities/SimpleDialog.js","pages/ShowCities/ShowCities.js"],"names":["module","exports","_","require","ExtractData","data","thisList","get","weekdays","Array","cityInfo","nameCity","countryCity","rDate","Date","sunRise","toLocaleTimeString","sDate","sunSet","date","timeCity","toUTCString","tempMax","tempMin","tempC","humidity","desc","descM","windDeg","windSpeed","iconShow","iconId","clearDay","partlyCloudyDay","cloudy","rain","thunderstorm","snow","fog","newList","map","eachList","key","dateShow","dt","getDate","dayShow","getDay","temp","main","temp_max","temp_min","description","weather","theIcon","filter","icon","tempMaxDate","d3","d","rollup","v","object","tempMinDate","iconShowDate","CardWeather","props","id","showData","removeLocation","classes","useStyles","iconDate","iconMain","Object","keys","Card","CardContent","Grid","container","direction","spacing","justify","alignItems","item","IconButton","style","color","blue","edge","onClick","event","window","location","reload","fontSize","aria-label","className","removeCity","e","Typography","variant","toFixed","width","src","padding","alt","dayWeather","Number","SimpleDialog","onClose","selectedValue","open","handleListItemClick","value","Fragment","Dialog","aria-labelledby","DialogTitle","List","city","ListItem","button","ListItemAvatar","Avatar","avatar","ListItemText","primary","name","autoFocus","ShowCities","cityList","setCityList","handleClickOpen","handleClose","saveLocationList","newCityList","getCardData","cardCity","root","fab","Badge","badgeContent","length","xs","sm"],"mappings":"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","file":"static/js/3.9431efc0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/clearDay.373f225d.svg\";","module.exports = __webpack_public_path__ + \"static/media/clearNight.182ab6e8.svg\";","module.exports = __webpack_public_path__ + \"static/media/cloudy.2e2d0f6b.svg\";","module.exports = __webpack_public_path__ + \"static/media/fog.a3a58712.svg\";","module.exports = __webpack_public_path__ + \"static/media/partlyCloudyDay.6038ecf0.svg\";","module.exports = __webpack_public_path__ + \"static/media/partlyCloudyNight.4d1becdc.svg\";","module.exports = __webpack_public_path__ + \"static/media/rain.cb4807cc.svg\";","module.exports = __webpack_public_path__ + \"static/media/sleet.5f3bdbd0.svg\";","module.exports = __webpack_public_path__ + \"static/media/snow.e2dcecf8.svg\";","module.exports = __webpack_public_path__ + \"static/media/thunderstorm.7cad6ca4.svg\";","module.exports = __webpack_public_path__ + \"static/media/tornado.4a222b1e.svg\";","module.exports = __webpack_public_path__ + \"static/media/wind.c627cea2.svg\";","import * as d3 from \"d3\";\r\nimport clearDay from 'images/clearDay.svg';\r\nimport clearNight from 'images/clearNight.svg';\r\nimport cloudy from 'images/cloudy.svg';\r\nimport fog from 'images/fog.svg';\r\nimport partlyCloudyDay from 'images/partlyCloudyDay.svg';\r\nimport partlyCloudyNight from 'images/partlyCloudyNight.svg';\r\nimport rain from 'images/rain.svg';\r\nimport sleet from 'images/sleet.svg';\r\nimport snow from 'images/snow.svg';\r\nimport thunderstorm from 'images/thunderstorm.svg';\r\nimport tornado from 'images/tornado.svg';\r\nimport wind from 'images/wind.svg';\r\n\r\nconst _ = require(\"lodash\");\r\n\r\nconst ExtractData=(data)=>{\r\n\tlet thisList=data?_.get(data,\"list\"):[]\r\n\r\n\tlet weekdays = new Array(\r\n        \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"\r\n    );\r\n\tlet cityInfo={}\r\n\tcityInfo.nameCity=_.get(data, 'city.name')\t\r\n\tcityInfo.countryCity=_.get(data, 'city.country')\t\r\n\tlet rDate=new Date(_.get(data,'city.sunrise')*1000)\r\n\tcityInfo.sunRise=rDate.toLocaleTimeString()\r\n\tlet sDate=new Date(_.get(data,'city.sunset')*1000)\r\n\tcityInfo.sunSet=sDate.toLocaleTimeString()\r\n\tlet date=new Date(_.get(data,'list[0].dt')*1000)\r\n\tcityInfo.timeCity=date.toUTCString()\r\n\tcityInfo.tempMax=_.get(data,'list[0].main.temp_max')-273.1\r\n\tcityInfo.tempMin=_.get(data,'list[0].main.temp_min')-273.1\r\n\tcityInfo.tempC=_.get(data,'list[0].main.temp')-273.1\r\n\tcityInfo.humidity=_.get(data,'list[0].main.humidity')\r\n\tcityInfo.desc=_.get(data,'list[0].weather[0].description')\r\n\tcityInfo.descM=_.get(data,'list[0].weather[0].main')\r\n\tcityInfo.windDeg=_.get(data,'list[0].wind.deg')\r\n\tcityInfo.windSpeed=_.get(data,'list[0].wind.speed')\r\n\t\r\n\tconst iconShow=[\r\n\t\t{iconId:'01d', iconShow:clearDay},\r\n\t\t{iconId:'02d', iconShow:partlyCloudyDay},\r\n\t\t{iconId:'03d', iconShow:cloudy},\r\n\t\t{iconId:'04d', iconShow:cloudy},\r\n\t\t{iconId:'09d', iconShow:rain},\r\n\t\t{iconId:'10d', iconShow:rain},\r\n\t\t{iconId:'11d', iconShow:thunderstorm},\r\n\t\t{iconId:'13d', iconShow:snow},\r\n\t\t{iconId:'50d', iconShow:fog},\r\n\t\t{iconId:'01n', iconShow:clearDay},\r\n\t\t{iconId:'02n', iconShow:partlyCloudyDay},\r\n\t\t{iconId:'03n', iconShow:cloudy},\r\n\t\t{iconId:'04n', iconShow:cloudy},\r\n\t\t{iconId:'09n', iconShow:rain},\r\n\t\t{iconId:'10n', iconShow:rain},\r\n\t\t{iconId:'11n', iconShow:thunderstorm},\r\n\t\t{iconId:'13n', iconShow:snow},\r\n\t\t{iconId:'50n', iconShow:fog}\r\n\t]\r\n\tlet newList=thisList?thisList.map((eachList, key)=>{\r\n\t\tlet dateShow=new Date(eachList.dt*1000)\r\n\t\treturn ( {\r\n\t\t\tdt:dateShow.getDate(),\r\n\t\t\tdayShow: weekdays[dateShow.getDay()],\r\n\t\t\ttemp:eachList.main.temp,\r\n\t\t\ttempMax:eachList.main.temp_max,\r\n\t\t\ttempMin:eachList.main.temp_min,\r\n\t\t\tdescription:eachList.weather[0].description,\r\n\t\t\ttheIcon:_.get(_.filter(iconShow, {iconId: eachList.weather[0].icon})[0],'iconShow')\r\n\t\t})\r\n\t}):[]\r\n\tconst  tempMaxDate = d3.nest()\r\n\t  .key(function(d) { return d.dayShow})\r\n\t  .rollup(function(v) { return d3.max(v, function(d) { return d.tempMax-273.1; })\r\n\t\t}).object(newList);\r\n\r\n\tconst  tempMinDate = d3.nest()\r\n\t  .key(function(d) { return d.dayShow})\r\n\t  .rollup(function(v) { return d3.min(v, function(d) { return d.tempMin-273.1; })\r\n\t\t}).object(newList);\r\n\r\n\tconst  iconShowDate = d3.nest()\r\n\t  .key(function(d) { return d.dayShow})\r\n\t  .rollup(function(v) { return d3.max(v, function(d) { return d.theIcon; })\r\n\t\t}).object(newList);   \r\n\t\r\nreturn {tempMaxDate, tempMinDate, iconShowDate, cityInfo}\r\n}\r\n\r\nexport default ExtractData","import React from 'react';\r\nimport { Card, CardContent, Grid, Typography, IconButton } from '@material-ui/core';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport useStyles from 'components/useStyles'\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport { blue } from '@material-ui/core/colors';\r\nimport clearDay from 'images/clearDay.svg';\r\nimport clearNight from 'images/clearNight.svg';\r\nimport cloudy from 'images/cloudy.svg';\r\nimport fog from 'images/fog.svg';\r\nimport partlyCloudyDay from 'images/partlyCloudyDay.svg';\r\nimport partlyCloudyNight from 'images/partlyCloudyNight.svg';\r\nimport rain from 'images/rain.svg';\r\nimport sleet from 'images/sleet.svg';\r\nimport snow from 'images/snow.svg';\r\nimport thunderstorm from 'images/thunderstorm.svg';\r\nimport tornado from 'images/tornado.svg';\r\nimport wind from 'images/wind.svg';\r\n\r\nconst _ = require(\"lodash\");\r\n\r\nconst CardWeather=props=>{\r\n\tconst { id, showData, removeLocation } = props\r\n\tconst classes = useStyles()\r\n\tconst cityInfo=showData.cityInfo\r\n\tconst tempMax=showData.tempMaxDate\r\n\tconst tempMin=showData.tempMinDate\r\n\tconst iconDate=showData.iconShowDate\r\n\tconst iconMain=iconDate[Object.keys(iconDate)[0]]\r\n\t\r\n\treturn (\r\n\t<Card>\r\n\t\t<CardContent>\r\n\t\t<Grid container  \r\n\t\t\tdirection=\"row\"\r\n\t\t\tspacing={2}\r\n\t\t\tjustify=\"space-between\"\r\n\t\t\talignItems=\"flex-start\"\r\n\t\t>\r\n\t\t<Grid item >\r\n\t\t\t<IconButton  id=\"butRefresh\"  style={{ color: blue[500] }} edge='start' onClick= {(event)=>window.location.reload(false)} >\r\n\t\t\t\t<RefreshIcon fontSize='large'/>\r\n\t\t\t</IconButton>\r\n\t\t</Grid>\r\n\t\t<Grid item>\r\n\t\t\t<IconButton aria-label=\"remove\" color=\"secondary\" className={classes.removeCity}  onClick={(e)=>removeLocation(id)}>\r\n\t\t\t\t<RemoveIcon fontSize='large'/>\r\n\t\t\t</IconButton>\r\n\t\t</Grid>\r\n\t\t</Grid>\r\n\t\t<Grid container  \r\n\t\t\tdirection=\"row\"\r\n\t\t\tspacing={2}\r\n\t\t\tjustify=\"space-between\"\r\n\t\t\talignItems=\"flex-start\"\r\n\t\t>\t\t\r\n\t\t<Grid item>\r\n\t\t\t<Typography variant=\"h4\">\r\n\t\t\t\t{cityInfo.nameCity}, {cityInfo.countryCity}\r\n\t\t\t</Typography>\r\n\t\t\t<Typography variant=\"h6\">\r\n\t\t\t\t{cityInfo.timeCity}\r\n\t\t\t</Typography>\r\n\t\t\t<Typography variant=\"h6\">\r\n\t\t\t\t{cityInfo.desc}\r\n\t\t\t</Typography>\r\n\t\t</Grid>\r\n\t\t<Grid item>\r\n\t\t\t<Typography variant=\"h3\">\r\n\t\t\t\t{cityInfo.tempC.toFixed(2)}°C\r\n\t\t\t</Typography>\r\n\t\t\t<img  width='70%' src={iconMain}  padding='50px' alt=\"clear day\" />\r\n\t\t</Grid>\r\n\t\t<Grid item>\r\n\t\t\t<Typography variant=\"h6\">\r\n\t\t\t\tWind: {cityInfo.windSpeed} mph {cityInfo.windDeg}°\r\n\t\t\t</Typography>\r\n\t\t\t<Typography variant=\"h6\">\r\n\t\t\t\tSunrise {cityInfo.sunRise}\r\n\t\t\t</Typography>\t\r\n\t\t\t<Typography variant=\"h6\">\r\n\t\t\t\tSunset {cityInfo.sunSet}\r\n\t\t\t</Typography>\r\n\t\t</Grid>\r\n\t\t<Grid item>\r\n\t\t\r\n\t\t</Grid>\r\n\t\t<Grid container  \r\n\t\t\tdirection=\"row\"\r\n\t\t\tspacing={2}\r\n\t\t\tjustify=\"space-between\"\r\n\t\t\talignItems=\"flex-start\"\r\n\t\t>\t\t\r\n\t\t{Object.keys(tempMax).map((dayWeather)=>{return(\r\n\t\t<Grid item key={dayWeather+\"1\"}>\r\n\t\t\t\t<Typography >\r\n\t\t\t\t\t{dayWeather}\r\n\t\t\t\t</Typography>\r\n\t\t\t\t<img  width='50%' src={_.get(iconDate,[dayWeather])}  padding='50px' alt=\"clear day\" />\r\n\t\t\t\t<Typography>\r\n\t\t\t\t\t{Number(tempMax[dayWeather]).toFixed(2)}°C\r\n\t\t\t\t</Typography>\r\n\t\t\t\t<Typography>\r\n\t\t\t\t\t{Number(tempMin[dayWeather]).toFixed(2)}°C\r\n\t\t\t\t</Typography>\r\n\r\n\t\t\t</Grid>\t\t\r\n\t\t\t)\r\n\t\t\t})\r\n\t\t}\r\n\t\t</Grid>\r\n\t\t</Grid>\r\n\t\t</CardContent>\r\n\t</Card>\r\n\t)\t\r\n}\r\n\r\nCardWeather.propTypes = {\r\n  showData: PropTypes.object,\r\n  id: PropTypes.string,\r\n  removeLocation: PropTypes.func\r\n};\r\n\r\nexport default CardWeather","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport useStyles from 'components/useStyles';\r\n\r\nconst  SimpleDialog=(props)=> {\r\n  const classes = useStyles();\r\n  const { onClose, selectedValue, open } = props;\r\n  const cities=[\r\n\t{\"id\": \"6554291\",\"name\":\"Trier\",\"state\":\"\",\"country\":\"DE\"}, \r\n\t{\"id\" : \"1151254\",\"name\" : \"Phuket\",\"state\" : \"\",\"country\" : \"TH\"},\r\n\t{\"id\" : \"1609348\",\"name\" : \"Bangkok\", \"state\" : \"\", \"country\" : \"TH\"},\r\n\t{\"id\" : \"5128638\",\"name\" : \"New York\",\"state\" : \"NY\",\"country\" : \"US\"},\r\n\t{\"id\" : \"1850147\",\"name\" : \"Tokyo\",\"state\" : \"\",\"country\" : \"JP\"},\r\n\t{\"id\" : \"1816670\",\"name\" : \"Beijing\",\"state\" : \"\",\"country\" : \"CN\"},\r\n\t{\"id\" : \"6455259\",\"name\" : \"Paris\",\"state\" : \"\",\"country\" : \"FR\"},\r\n\t{\"id\" : \"2643743\",\"name\" : \"London\",\"state\" : \"\",\"country\" : \"GB\"}\r\n\t]\r\n\r\n  const handleClose = () => {\r\n    onClose(selectedValue);\r\n  };\r\n\r\n  const handleListItemClick = (value) => {\r\n    onClose(value);\r\n  };\r\n\r\n  return (\r\n  <React.Fragment>\r\n    <Dialog onClose={handleClose} aria-labelledby=\"simple-dialog-title\" open={open}>\r\n      <DialogTitle id=\"simple-dialog-title\">Select City</DialogTitle>\r\n      <List>\r\n        {cities.map((city) => (\r\n          <ListItem button onClick={() => handleListItemClick(city.id)} key={city.id}>\r\n            <ListItemAvatar>\r\n              <Avatar className={classes.avatar}>\r\n                <PersonIcon />\r\n              </Avatar>\r\n            </ListItemAvatar>\r\n            <ListItemText primary={city.name} />\r\n          </ListItem>\r\n        ))}\r\n\r\n        <ListItem autoFocus button onClick={() => handleListItemClick('addAccount')}>\r\n          <ListItemAvatar>\r\n            <Avatar>\r\n              <AddIcon />\r\n            </Avatar>\r\n          </ListItemAvatar>\r\n          <ListItemText primary=\"Add account\" />\r\n        </ListItem>\r\n      </List>\r\n    </Dialog>\r\n\t</React.Fragment>\r\n  );\r\n}\r\n\r\nSimpleDialog.propTypes = {\r\n  onClose: PropTypes.func.isRequired,\r\n  open: PropTypes.bool.isRequired,\r\n  selectedValue: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default SimpleDialog","import React from 'react';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport {IconButton, Badge, Grid} from '@material-ui/core';\r\nimport { blue } from '@material-ui/core/colors';\r\nimport PropTypes from 'prop-types';\r\nimport useStyles from 'components/useStyles'\r\nimport ExtractData from './ExtractData'\r\nimport CardWeather from './CardWeather'\r\nimport SimpleDialog from './SimpleDialog'\r\n\r\n\r\nconst ShowCities=props=>{\r\n\tconst classes=useStyles()\r\n\tconst { cityList, setCityList, handleClickOpen, handleClose, saveLocationList, open,  selectedValue, data\r\n\t\t\t} = props\r\n\r\n\tconst removeLocation=(id)=>{\r\n\t\tlet newCityList=cityList\r\n\t\tif (newCityList[id]) {\r\n\t\t\tdelete newCityList[id];\r\n\t\tsaveLocationList(newCityList);\r\n\t\tsetCityList(newCityList)\r\n\t\t}\r\n\t\twindow.location.reload(false);\r\n\t}\r\n\r\n\tconst getCardData=\r\n\t\t\tdata.map((cardCity)=>{\r\n\t\t\t\tlet showData=ExtractData(cardCity.data)\r\n\t\t\t\treturn ({\r\n\t\t\t\t\t[cardCity.data.city.id]:showData\r\n\t\t\t\t}\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t\t)\r\n\r\nreturn (\r\n\r\n   <div className={classes.root} key='showCity'>\r\n\t<Grid  container spacing={2}   direction=\"row\"  justify=\"center\" alignItems=\"center\">\r\n\t<IconButton  id=\"butAdd\"  style={{ color: blue[50] }} className={classes.fab} onClick={handleClickOpen}>\r\n        <Badge badgeContent={Object.keys(cityList).length} color=\"secondary\">\r\n            <AddIcon fontSize='large'/>\r\n        </Badge>\r\n    </IconButton>\r\n\t<SimpleDialog selectedValue={selectedValue} open={open} onClose={handleClose}  />\r\n\t\t\t   {getCardData.map((cardCity)=>{\r\n\t\t\t\t   return (\r\n\t\t\t\t\t\t<Grid item xs={12}  sm={12} key={Object.keys(cardCity)[0]}>\r\n\t\t\t\t\t\t\t<CardWeather id={Object.keys(cardCity)[0]} showData={cardCity[Object.keys(cardCity)[0]]} removeLocation={removeLocation}/>\r\n\t\t\t\t\t\t</Grid>\t\r\n\t\t\t\t\t)\t\t\t\t \r\n\t\t\t\t   })}\r\n\t\r\n\t</Grid>\r\n\t\t\r\n\t</div>\r\n\r\n)\r\n}\r\n\r\nShowCities.propTypes = {\r\n  cityList: PropTypes.object.isRequired,\r\n  setCityList: PropTypes.func.isRequired,\r\n  handleClickOpen: PropTypes.func.isRequired,\r\n  handleClose: PropTypes.func.isRequired,\r\n  saveLocationList: PropTypes.func.isRequired,\r\n  open: PropTypes.bool.isRequired,\r\n  selectedValue: PropTypes.string.isRequired,\r\n  data: PropTypes.array.isRequired\r\n};\r\n\r\nexport default ShowCities"],"sourceRoot":""}